"""Script to get an inventory of the instance created in OCI
The information will be stored in a CSV file
CSV can be generated by compartment or obtaining all the instances in Tenancy
 """
from logging import setLogRecordFactory
#from os.path import basename
import oci
from pathlib import Path
from dotenv import load_dotenv
import csv
import datetime
import os



def obtain_compartment_id(identity_client, base_compartment_id):
    #Function to return the compartment OCID from the name selected
    list_compartments_response = identity_client.list_compartments(compartment_id=base_compartment_id,
                                    sort_by="NAME")
    compartments_id = []
    compartments_name = []

    for compartment in list_compartments_response.data:
        compartments_name.append(compartment.name)
        compartments_id.append(compartment.id)

    compartments_dict = {compartments_name[i]: compartments_id[i] for i in range(len(compartments_name))}

    #print(compartments_dict)
    return compartments_dict


def select_compartment(compartments_details, base_compartment_id):
    #Function to select the compartment that we need to work in
    comparments_names_list = []
    compartment_id_selected = []

    print('\n#####################################################\n')
    print('These are the compartments available')
    
    for each_compartment in compartments_details.keys():
        comparments_names_list.append(each_compartment)
    print(comparments_names_list)

    choose_compartment_name = input("""Write the compartment name you require or write [TENANCY] to get all: """)
    
    if choose_compartment_name.lower() == "tenancy":
        print("Tenancy or Root OCID Selected")
        for key in compartments_details:
            compartment_id_selected.append(compartments_details[key])
    else:
        for key in compartments_details:
            if key.lower() in choose_compartment_name.lower():
                compartment_id_selected.append(compartments_details[key])
    
    print(compartment_id_selected)
    return compartment_id_selected


def obtain_instances_information(compute_client, compartment_id_selected):
    #Function that return a list of instances from the previous step
    list_of_instance_names = []
    list_values = create_file()
    csv_object = list_values[0]
    csv_write_object =  list_values[1]
    filename = list_values[2]

    for each_compartment in compartment_id_selected:
        list_instances_response = compute_client.list_instances(compartment_id=each_compartment,
                                    sort_order="DESC",
                                    lifecycle_state="RUNNING")
    
        for instance in list_instances_response.data:
            #print(instance)
            compartment_name = each_compartment
            instance_name = instance.display_name
            availability_domain = instance.availability_domain
            fault_domain = instance.fault_domain
            instance_id = instance.id
            instance_shape = instance.shape
            instance_time_created = instance.time_created
            csv_write_object.writerow([compartment_name, instance_name, availability_domain, fault_domain, instance_id, instance_shape, instance_time_created])
            list_of_instance_names.append(instance_name)

    csv_object.close()
    print(str(len(list_of_instance_names)) + ' Instances Added to inventory file ' + filename)
    return list_of_instance_names


def create_file():
    current_date = datetime.datetime.now()
    filename = str(current_date.year) + str(current_date.month) + str(current_date.day) + '_instance_inventory.csv'
    csv_object = open(filename, 'w', newline='')
    csv_write_object = csv.writer(csv_object)
    csv_write_object.writerow(['Compartments','Instance Name','Availability Domain', 'Fault Domain', 'Instance ID', 'Shape', 'Time Created'])

    return csv_object, csv_write_object, filename


def run():

    #To get the connection file
    config = oci.config.from_file(os.environ.get("CONFIG_PATH"), os.environ.get("OCI_PROFILE"))
    base_compartment_id = config['tenancy']
    

    # Initialize compute client with default config file
    compute_client = oci.core.ComputeClient(config)

    # Initialize service client with default config file
    identity_client = oci.identity.IdentityClient(config)

    #SELECT THE REQUIRED COMPARTMENT
    compartments_details = obtain_compartment_id(identity_client, base_compartment_id)
    compartment_id_selected = select_compartment(compartments_details, base_compartment_id)
    
    #Obtain the ID of instances inside the compartment selected from the previous line
    obtain_instances_information(compute_client, compartment_id_selected)


if __name__ == '__main__':
    load_dotenv()
    env_path = Path('.')/'.env'
    load_dotenv(dotenv_path=env_path)
    print("""WELCOME!!!
    This script will allow you to get an inventory of your instances inside a compartment or tenancy\n
    """)
    run()
